rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // complete access to admins
    match /{document=**} {
      allow read, write: if validUser(request)
      	&& isAdmin(getUser(request.auth.uid));
    }
    // complete read access to Managers
    match /{document=**} {
      allow read: if validUser(request)
      	&& isManager(getUser(request.auth.uid));
    }
    
  	match /Users/{userID} {
      // allow rights to yourself
      allow read, write: if validUser(request) && request.auth.uid == userID;
      // allow update: if validUser(request) && (assignGroup(request) || assignRole(request));
    }
    
    match /Groups/{groupID} {
      allow read, write: if validUser(request) && groupID in getResource("Users", request.auth.uid);
    }
    
    match /Roles/{roleID} {
      allow read: if validUser(request);
    }
    
    match /Rights/{rightsID} {
      allow read: if validUser(request);    
    }
    
    match /Documents/{roleID} {
      allow read, write: if validUser(request);    
    }
    
    
    // Helper
    function validUser(request) {
      let user = getResource("Users", request.auth.uid);
      return request.auth != null && exists("Users", request.auth.uid)
        && ('User' in user.Groups || 'User' in user.Roles) 
    }
    function getResource(Collection, ID) {
      return get(/databases/$(database)/documents/$(Collection)/$(ID)).data
    }
    function resourceExists(Collection, ID) {
      return exists(/databases/$(database)/documents/$(Collection)/$(ID))
    }

    // Admin Access
    function isAdmin(User) {
      return ("Admin" in User.data.Roles) || ("Admin" in User.data.Groups)
    }

    // Manager Access
    function isManager(User) {
    	return ("Manager" in User.data.Roles) || ("Manager" in User.data.Groups)
    }
    // User Access

    function assignGroup(request) {
      let usr = getResource("Users", request.auth.uid);
      let payload = request.resource.data.Payload;
      return (payload.Type == "Group" && payload.Id in usr.Groups)
    }
    function assignRole(request) {
      let usr = getResource("Users", request.auth.uid);
      let payload = request.resource.data.Payload;
      return (payload.Type == "Role" && payload.Id in usr.Groups)
    }
  }
}
