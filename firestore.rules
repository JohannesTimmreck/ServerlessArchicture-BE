rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // complete access to admins
    match /{document=**} {
      allow read, write: if validUser(request)
      	&& isAdmin(getResource("User", request.auth.uid));
    }
    // complete read access to Managers
    match /{document=**} {
      allow read: if validUser(request)
      	&& isManager(getResource("User", request.auth.uid));
    }
    
  	match /Users/{userID} {
      // allow rights to yourself
      allow get, update, delete: if validUser(request) && request.auth.uid == userID;
    }
    
    match /Groups/{groupID} {
      allow create: if validUser(request);
      allow get: if validUser(request) && groupMember(getResource("Users", request.auth.uid).Groups, groupID);
      allow update, delete: if validUser(request) && groupMemberAdv(getResource("Users", request.auth.uid).Groups, groupID);
    }
    
    match /Roles/{roleID} {
      allow get: if validUser(request);
    }
    
    match /Rights/{rightsID} {
      allow get: if validUser(request);
    }
    
    match /Documents/{documentID} {
      allow create: if validUser(request);
      // Access to your own documents
      allow get, update, delete: if validUser(request) && getResource("Documents", documentID).Author == request.auth.uid;
      allow get: if getResource("Documents", documentID).Visibility == "public";
    }
    
    match /CommentSection/{commentSectionID} {
      allow get, write: if validUser(request);    
    }

    match /Chats/{chatID} {
      allow create: if validUser(request);
      allow get: if validUser(request) && request.auth.uid in getResource("Chats", chatID).user;
      allow update, delete: if validUser(request) && request.auth.uid in getResource("Chats", chatID).owner;
      match /messages/{messageID} {
        allow update: if validUser(request) && request.auth.uid in getResource("Chats", chatID).user;
      }
    }

    // Helper
    function validUser(request) {
      let usr = getResource("Users", request.auth.uid);
      return request.auth != null && resourceExists("Users", request.auth.uid)
        && 'User' in usr.Roles;
    }
    function getResource(Collection, ID) {
      return get(/databases/$(database)/documents/$(Collection)/$(ID)).data;
    }
    function resourceExists(Collection, ID) {
      return exists(/databases/$(database)/documents/$(Collection)/$(ID));
    }

    function groupMember(usr, groupID) {
      return (groupID in usr.Groups && "$(groupID)_User" in usr.Roles) || groupMemberAdv(usr, groupID);
    }

    function groupMemberAdv(usr, groupID) {
      return groupID in usr.Groups && ("$(groupID)_Admin" in usr.Roles || "$(groupID)_Manager" in usr.Roles);
    }

    // Admin Access
    function isAdmin(User) {
      return ("Admin" in User.Roles)
    }

    // Manager Access
    function isManager(User) {
    	return ("Manager" in User.Roles)
    }
  }
}
